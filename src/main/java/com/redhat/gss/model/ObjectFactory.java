//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.01.23 at 12:57:50 PM PST 
//


package com.redhat.gss.model;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the com.redhat.gss.model package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _ModuleAbsent_QNAME = new QName("urn:jboss:module:1.3", "module-absent");
    private final static QName _ModuleAlias_QNAME = new QName("urn:jboss:module:1.3", "module-alias");
    private final static QName _Module_QNAME = new QName("urn:jboss:module:1.3", "module");
    private final static QName _ResourcesTypeResourceRoot_QNAME = new QName("urn:jboss:module:1.3", "resource-root");
    private final static QName _ResourcesTypeNativeArtifact_QNAME = new QName("urn:jboss:module:1.3", "native-artifact");
    private final static QName _ResourcesTypeArtifact_QNAME = new QName("urn:jboss:module:1.3", "artifact");
    private final static QName _FilterTypeIncludeSet_QNAME = new QName("urn:jboss:module:1.3", "include-set");
    private final static QName _FilterTypeInclude_QNAME = new QName("urn:jboss:module:1.3", "include");
    private final static QName _FilterTypeExcludeSet_QNAME = new QName("urn:jboss:module:1.3", "exclude-set");
    private final static QName _FilterTypeExclude_QNAME = new QName("urn:jboss:module:1.3", "exclude");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.redhat.gss.model
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link ModuleType }
     * 
     */
    public ModuleType createModuleType() {
        return new ModuleType();
    }

    /**
     * Create an instance of {@link ModuleAliasType }
     * 
     */
    public ModuleAliasType createModuleAliasType() {
        return new ModuleAliasType();
    }

    /**
     * Create an instance of {@link ModuleAbsentType }
     * 
     */
    public ModuleAbsentType createModuleAbsentType() {
        return new ModuleAbsentType();
    }

    /**
     * Create an instance of {@link PermissionsType }
     * 
     */
    public PermissionsType createPermissionsType() {
        return new PermissionsType();
    }

    /**
     * Create an instance of {@link PropertyListType }
     * 
     */
    public PropertyListType createPropertyListType() {
        return new PropertyListType();
    }

    /**
     * Create an instance of {@link ArtifactType }
     * 
     */
    public ArtifactType createArtifactType() {
        return new ArtifactType();
    }

    /**
     * Create an instance of {@link SystemDependencyType }
     * 
     */
    public SystemDependencyType createSystemDependencyType() {
        return new SystemDependencyType();
    }

    /**
     * Create an instance of {@link ResourcesType }
     * 
     */
    public ResourcesType createResourcesType() {
        return new ResourcesType();
    }

    /**
     * Create an instance of {@link ModuleDependencyType }
     * 
     */
    public ModuleDependencyType createModuleDependencyType() {
        return new ModuleDependencyType();
    }

    /**
     * Create an instance of {@link ClassNameType }
     * 
     */
    public ClassNameType createClassNameType() {
        return new ClassNameType();
    }

    /**
     * Create an instance of {@link PathType }
     * 
     */
    public PathType createPathType() {
        return new PathType();
    }

    /**
     * Create an instance of {@link PathSetType }
     * 
     */
    public PathSetType createPathSetType() {
        return new PathSetType();
    }

    /**
     * Create an instance of {@link ResourceType }
     * 
     */
    public ResourceType createResourceType() {
        return new ResourceType();
    }

    /**
     * Create an instance of {@link PropertyType }
     * 
     */
    public PropertyType createPropertyType() {
        return new PropertyType();
    }

    /**
     * Create an instance of {@link DependenciesType }
     * 
     */
    public DependenciesType createDependenciesType() {
        return new DependenciesType();
    }

    /**
     * Create an instance of {@link FilterType }
     * 
     */
    public FilterType createFilterType() {
        return new FilterType();
    }

    /**
     * Create an instance of {@link PermissionType }
     * 
     */
    public PermissionType createPermissionType() {
        return new PermissionType();
    }

    /**
     * Create an instance of {@link PathSpecType }
     * 
     */
    public PathSpecType createPathSpecType() {
        return new PathSpecType();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ModuleAbsentType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "urn:jboss:module:1.3", name = "module-absent")
    public JAXBElement<ModuleAbsentType> createModuleAbsent(ModuleAbsentType value) {
        return new JAXBElement<ModuleAbsentType>(_ModuleAbsent_QNAME, ModuleAbsentType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ModuleAliasType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "urn:jboss:module:1.3", name = "module-alias")
    public JAXBElement<ModuleAliasType> createModuleAlias(ModuleAliasType value) {
        return new JAXBElement<ModuleAliasType>(_ModuleAlias_QNAME, ModuleAliasType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ModuleType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "urn:jboss:module:1.3", name = "module")
    public JAXBElement<ModuleType> createModule(ModuleType value) {
        return new JAXBElement<ModuleType>(_Module_QNAME, ModuleType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ResourceType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "urn:jboss:module:1.3", name = "resource-root", scope = ResourcesType.class)
    public JAXBElement<ResourceType> createResourcesTypeResourceRoot(ResourceType value) {
        return new JAXBElement<ResourceType>(_ResourcesTypeResourceRoot_QNAME, ResourceType.class, ResourcesType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ArtifactType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "urn:jboss:module:1.3", name = "native-artifact", scope = ResourcesType.class)
    public JAXBElement<ArtifactType> createResourcesTypeNativeArtifact(ArtifactType value) {
        return new JAXBElement<ArtifactType>(_ResourcesTypeNativeArtifact_QNAME, ArtifactType.class, ResourcesType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ArtifactType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "urn:jboss:module:1.3", name = "artifact", scope = ResourcesType.class)
    public JAXBElement<ArtifactType> createResourcesTypeArtifact(ArtifactType value) {
        return new JAXBElement<ArtifactType>(_ResourcesTypeArtifact_QNAME, ArtifactType.class, ResourcesType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PathSetType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "urn:jboss:module:1.3", name = "include-set", scope = FilterType.class)
    public JAXBElement<PathSetType> createFilterTypeIncludeSet(PathSetType value) {
        return new JAXBElement<PathSetType>(_FilterTypeIncludeSet_QNAME, PathSetType.class, FilterType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PathSpecType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "urn:jboss:module:1.3", name = "include", scope = FilterType.class)
    public JAXBElement<PathSpecType> createFilterTypeInclude(PathSpecType value) {
        return new JAXBElement<PathSpecType>(_FilterTypeInclude_QNAME, PathSpecType.class, FilterType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PathSetType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "urn:jboss:module:1.3", name = "exclude-set", scope = FilterType.class)
    public JAXBElement<PathSetType> createFilterTypeExcludeSet(PathSetType value) {
        return new JAXBElement<PathSetType>(_FilterTypeExcludeSet_QNAME, PathSetType.class, FilterType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PathSpecType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "urn:jboss:module:1.3", name = "exclude", scope = FilterType.class)
    public JAXBElement<PathSpecType> createFilterTypeExclude(PathSpecType value) {
        return new JAXBElement<PathSpecType>(_FilterTypeExclude_QNAME, PathSpecType.class, FilterType.class, value);
    }

}
